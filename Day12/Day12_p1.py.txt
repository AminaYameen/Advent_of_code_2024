from collections import deque

def read_input(file_path):
    """Reads the input file and returns the garden map as a list of strings."""
    with open(file_path, 'r') as file:
        return [line.strip() for line in file]

def find_regions_and_calculate_cost(garden_map):
    """
    Identifies all regions, calculates their area, perimeter, and the total fencing cost.

    Args:
        garden_map: List of strings representing the garden.

    Returns:
        Total fencing cost of all regions.
    """
    rows, cols = len(garden_map), len(garden_map[0])
    visited = [[False] * cols for _ in range(rows)]
    total_cost = 0

    # Directions for moving up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    def bfs(start_row, start_col):
        """Performs BFS to calculate the area and perimeter of a region."""
        queue = deque([(start_row, start_col)])
        visited[start_row][start_col] = True
        region_char = garden_map[start_row][start_col]
        area = 0
        perimeter = 0

        while queue:
            r, c = queue.popleft()
            area += 1
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < rows and 0 <= nc < cols:
                    if garden_map[nr][nc] == region_char and not visited[nr][nc]:
                        visited[nr][nc] = True
                        queue.append((nr, nc))
                    elif garden_map[nr][nc] != region_char:
                        perimeter += 1
                else:
                    perimeter += 1

        return area, perimeter

    # Process each cell in the garden map
    for row in range(rows):
        for col in range(cols):
            if not visited[row][col]:
                area, perimeter = bfs(row, col)
                total_cost += area * perimeter

    return total_cost

if __name__ == "__main__":
    # Path to the input file
    input_file = "Day12part1_input.txt"

    # Read and process the input
    garden_map = read_input(input_file)
    total_cost = find_regions_and_calculate_cost(garden_map)

    print(f"Total fencing cost: {total_cost}")
